import org.junit.jupiter.api.DisplayName;

import java.util.ArrayList;

import static org.junit.jupiter.api.Assertions.*;

class returnMovieTest {

    Movie testMovie = new Movie();

    @org.junit.jupiter.api.Test
    @DisplayName("Return Movie Test")
    void returnMovieTest_movie() {
        ArrayList<Movie> MovieList = new ArrayList<Movie>();

        readfile s = new readfile();
        s.openfile();
        s.scanfileReturn(MovieList);
        s.closefile();

        testMovie.setTitle("Coco");
        testMovie.setYear(2017);
        testMovie.setGenre("Kids");
        testMovie.setDirector("Lee Unkrich");
        testMovie.setID(5);
        testMovie.setFormat("Blu-ray");

        String movieString =  "\\n\\tID: " + MovieList.get(0).getID() + "\n" +
                "                \"\\n\\tTitle: " + MovieList.get(0).getTitle() + "\n" +
                "                \"\\n\\tDirector: " + MovieList.get(0).getDirector() + "\n" +
                "                \"\\n\\tYear of release: " + MovieList.get(0).getYear() + "\n" +
                "                \"\\n\\tFormat: " + MovieList.get(0).getFormat() + "\n" +
                "                \"\\n\\tGenre: " + MovieList.get(0).getGenre();

        String testMovieString =  "\\n\\tID: " + testMovie.getID() + "\n" +
                "                \"\\n\\tTitle: " + testMovie.getTitle() + "\n" +
                "                \"\\n\\tDirector: " + testMovie.getDirector() + "\n" +
                "                \"\\n\\tYear of release: " + testMovie.getYear() + "\n" +
                "                \"\\n\\tFormat: " + testMovie.getFormat() + "\n" +
                "                \"\\n\\tGenre: " + testMovie.getGenre();

        assertEquals(testMovieString, movieString, "Error: The movie was not copied correctly.");
    }

    @org.junit.jupiter.api.Test
    @DisplayName("Remove Movie Test")
    void removeMovieTest() {
        ArrayList<Movie> MovieList = new ArrayList<Movie>();
        ArrayList<Movie> emptyList = new ArrayList<Movie>();

        boolean removed = true;

        testMovie.setTitle("Coco");
        testMovie.setYear(2017);
        testMovie.setGenre("Kids");
        testMovie.setDirector("Lee Unkrich");
        testMovie.setID(1);
        testMovie.setFormat("Blu-ray");

        MovieList.add(testMovie);

        assertEquals(removed, Movie.removeMovie(MovieList));
    }

    @org.junit.jupiter.api.Test
    @DisplayName("Sell Movie Test")
    void sellMovieTest() {
        ArrayList<Movie> MovieList = new ArrayList<Movie>();
        int age, price = 25;

        readfile s = new readfile();
        s.openfile();


        testMovie.setTitle("Coco");
        testMovie.setYear(1974);
        testMovie.setGenre("Kids");
        testMovie.setDirector("Lee Unkrich");
        testMovie.setID(5);
        testMovie.setFormat("VHS");

        age = 2024 - testMovie.getYear();
        if(age >= 44)
        {
            System.out.println("This movie was released between 1970-1980 so an extra 25 dollars will be added to your sale price.");
            price = price + 25;
        } else if (age >= 34) {
            System.out.println("This movie was released between 1980-1990 so an extra 20 dollars will be added to your sale price.");
            price = price + 20;
        } else if (age >= 24) {
            System.out.println("This movie was released between 1990-2000 so an extra 15 dollars will be added to your sale price.");
            price = price + 15;
        } if (testMovie.getFormat().equals("VHS")) {
            System.out.println("This movie is in VHS format so an extra 20 dollars will be added to your sale price.");
            price = price + 20;
        }

        System.out.println("\n\tYOUR PRICE WILL BE...");
        System.out.println("$" + price);

        assertEquals(price, s.scanfileSell(MovieList), "Error: The movie price was not calculated correctly.");
    }

    @org.junit.jupiter.api.Test
    @DisplayName("Update Movie Test")
    void updateMovieTest() {
        ArrayList<Movie> MovieList = new ArrayList<Movie>();

        Movie expectedMovie = new Movie();
        Movie actualMovie = new Movie();

        expectedMovie.setTitle("Coco");
        expectedMovie.setYear(2017);
        expectedMovie.setGenre("Kids");
        expectedMovie.setDirector("Lee Unkrich");
        expectedMovie.setID(4);
        expectedMovie.setFormat("Blu-ray");

        actualMovie.setTitle("Coco");
        actualMovie.setYear(2017);
        actualMovie.setGenre("Kids");
        actualMovie.setDirector("Lee Unkrich");
        actualMovie.setID(1);
        actualMovie.setFormat("Blu-ray");

        MovieList.add(actualMovie);

        Movie.updateMovie(MovieList);

        String expectedString =  "\\n\\tID: " + expectedMovie.getID() + "\n" +
                "                \"\\n\\tTitle: " + expectedMovie.getTitle() + "\n" +
                "                \"\\n\\tDirector: " + expectedMovie.getDirector() + "\n" +
                "                \"\\n\\tYear of release: " + expectedMovie.getYear() + "\n" +
                "                \"\\n\\tFormat: " + expectedMovie.getFormat() + "\n" +
                "                \"\\n\\tGenre: " + expectedMovie.getGenre();

        String actualString =  "\\n\\tID: " + actualMovie.getID() + "\n" +
                "                \"\\n\\tTitle: " + actualMovie.getTitle() + "\n" +
                "                \"\\n\\tDirector: " + actualMovie.getDirector() + "\n" +
                "                \"\\n\\tYear of release: " + actualMovie.getYear() + "\n" +
                "                \"\\n\\tFormat: " + actualMovie.getFormat() + "\n" +
                "                \"\\n\\tGenre: " + actualMovie.getGenre();

        assertEquals(expectedString, actualString, "Error: The movie was not updated correctly.");
    }
}
